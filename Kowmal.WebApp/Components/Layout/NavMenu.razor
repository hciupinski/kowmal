@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Kowmal.WebApp</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            @if (!context.User.Identity?.IsAuthenticated ?? false)
            {
                <NavLink class="nav-link" href="login" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            }
            else
            {
            <span>Hello, @context.User.Identity!.Name!</span>
            <NavLink class="nav-link" href="logout" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Logout
            </NavLink>
            }
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="posts">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Posts
            </NavLink>
        </div>
    </nav>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    
    private AuthenticationState context;

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    
    protected override async Task OnInitializedAsync()
    {
        context = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}