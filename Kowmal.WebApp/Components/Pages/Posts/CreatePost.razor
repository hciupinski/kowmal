@page "/posts/create"
@attribute [Authorize]
@using FluentValidation
@using Kowmal.WebApp.Features.CreatePost
@using Kowmal.WebApp.Features.UploadPhotos
@using MediatR
@using Kowmal.WebApp.Components.Components
@using Kowmal.WebApp.ViewModels
@using Severity = MudBlazor.Severity
@inject IMediator Mediator
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>Post</PageTitle>

<h1>New Post</h1>

<div>
    <MudCard>
        <MudForm Model="@_model" @ref="@_form" Validation="@(_createPostValidator.ValidateValue)" ValidationDelay="0">
            <MudTextField @bind-Value="_model.Name" For="@(() => _model.Name)" Immediate="true" Label="Name"></MudTextField>
            <MudTextField @bind-Value="_model.Description" For="@(() => _model.Description)" Label="Description" Variant="Variant.Filled" Lines="5"></MudTextField>
        </MudForm>

        <UploadFilesZone OnFilesChanged="HandleFilesChanged"/>

        <MudCardActions >
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-2" OnClick="@(async () => await CreatePostAction())">Create</MudButton>
        </MudCardActions>
    </MudCard>
</div>


@code {
    [Inject] ISnackbar Snackbar { get; set; }
    CreatePostFluentValidator _createPostValidator = new CreatePostFluentValidator();
    CreatePostViewModel _model = new CreatePostViewModel();
    MudForm _form;
    private string? _token;
    private bool IsUploaded;

    private async Task CreatePostAction()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            var post = await Mediator.Send(new CreatePostRequest() { Name = _model.Name, Description = _model.Description });

            _model.Identifier = post.Identifier;

            await Mediator.Send(new UploadPhotosRequest() { Files = _model.Files!, PostId = _model.Identifier.Value });

            Snackbar.Add("Post created!", Severity.Success);

            NavManager.NavigateTo($"/posts/{_model.Identifier}/edit");

            IsUploaded = true;
        }
    }

    private void HandleFilesChanged(List<IBrowserFile> files)
    {
        _model.Files = files;
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="CreatePostModel"></typeparam>
    public class CreatePostFluentValidator : AbstractValidator<CreatePostViewModel>
    {
        public CreatePostFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Description)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Files)
                .NotEmpty();
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreatePostViewModel>.CreateWithOptions((CreatePostViewModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

}