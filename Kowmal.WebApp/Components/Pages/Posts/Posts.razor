@page "/posts"
@attribute [Authorize]
@using Kowmal.WebApp.Features.GetPosts
@using Kowmal.WebApp.Features.PublishPost
@using Kowmal.WebApp.ViewModels
@using MediatR
@inject NavigationManager NavManager
@inject IMediator Mediator
@rendermode InteractiveServer

<div>
    <MudCard>
        <MudCardHeader>
            <MudNavLink Href="/posts/create" Icon="@Icons.Material.Filled.AdminPanelSettings">Create post</MudNavLink>
        </MudCardHeader>
        <MudTable T="PostListItemViewModel" Items="@Items" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" OnRowClick="RedirectToEdit">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Photos</MudTh>
                <MudTh>IsPublished</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Photos">@context.PhotosCount</MudTd>
                <MudTd DataLabel="IsPublished">

                    @if (context.IsPublished)
                    {
                        <MudChip Color="Color.Success">Yes</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Secondary">No</MudChip>
                    }
                </MudTd>
                <MudTd>
                    @if (!context.IsPublished)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Dark" Class="ml-auto" OnClick="@(async () => await PublishPostAction(context.Identifier))">Publish</MudButton>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>

    </MudCard>
</div>

@code {
    [Inject] ISnackbar Snackbar { get; set; }
    private bool _hidePosition;
    private bool _loading;
    private IEnumerable<PostListItemViewModel> Items = new List<PostListItemViewModel>();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        Items = await Mediator.Send(new GetPostsQuery());
        _loading = false;
    }

    private void RedirectToEdit(TableRowClickEventArgs<PostListItemViewModel> tableRowClickEventArgs)
    {
        if (!tableRowClickEventArgs.Item.IsPublished)
        {
            NavManager.NavigateTo($"/posts/{tableRowClickEventArgs.Item.Identifier}/edit");
        }
    }

    private async Task PublishPostAction(Guid identifier)
    {
        await Mediator.Send(new PublishPostRequest(identifier));

        Snackbar.Add("Post published!");

        await OnInitializedAsync();
    }

}